#from _typeshed import FileDescriptorLike
import copy


class Variable:
    userID = None  # botのID
    msgID = None  # メッセージのID
    gameStartFlag = False
    gameOverFlag = False
    player = None  # メンションする相手
    FIELD_WIDTH = 10  # フィールドの横
    FIELD_HEIGHT = 10  # フィールドの縦
    score = 0  # スコア
    minoX = 3  # ミノの出現位置のX座標
    minoY = 0  # ミノの出現位置のY座標
    rotate = 0  # 回転を管理する変数
    l = [0, 1, 2, 3, 4, 5, 6]  # ミノ呼び出しのための数値を管理するリスト
    nextList = []  # ネクストミノを格納するリスト
    holdMino = 100  # ホールドのミノ番号(空は100)
    changeCount = 0  # ホールドの使用回数
    minoType = None  # 現在操作しているミノ
    field = []  # 盤面用の配列
    newField = []  # 盤面コピー用の配列
    minoName = {0: "I", 1: "J", 2: "L", 3: "O", 4: "S", 5: "T", 6: "Z"}
    offsetnum=0
    lastcommand=False

    for i in range(20):
        line = []
        for j in range(10):
            line.append(0)
        field.append(copy.deepcopy(line))
    # fieldのすべての中身を0にする
    for i in range(FIELD_HEIGHT):
        for j in range(FIELD_WIDTH):
            field[i][j] = 0

    # 各ミノの各回転での座標(x,y)
    minoShapes = [
        # I
        [[[0, 1], [1, 1], [2, 1], [3, 1]],
         [[2, 0], [2, 1], [2, 2], [2, 3]],
         [[0, 2], [1, 2], [2, 2], [3, 2]],
         [[1, 0], [1, 1], [1, 2], [1, 3]]],
        # J
        [[[0, 0], [0, 1], [1, 1], [2, 1]],
         [[1, 0], [2, 0], [1, 1], [1, 2]],
         [[0, 1], [1, 1], [2, 1], [2, 2]],
         [[1, 0], [1, 1], [1, 2], [0, 2]]],
        # L
        [[[0, 1], [1, 1], [2, 1], [2, 0]],
         [[1, 0], [1, 1], [1, 2], [2, 2]],
         [[0, 1], [1, 1], [2, 1], [0, 2]],
         [[0, 0], [1, 0], [1, 1], [1, 2]]],
        # O
        [[[1, 0], [1, 1], [2, 0], [2, 1]],
         [[1, 0], [1, 1], [2, 0], [2, 1]],
         [[1, 0], [1, 1], [2, 0], [2, 1]],
         [[1, 0], [1, 1], [2, 0], [2, 1]]],
        # S
        [[[1, 0], [2, 0], [0, 1], [1, 1]],
         [[1, 0], [1, 1], [2, 1], [2, 2]],
         [[1, 1], [2, 1], [0, 2], [1, 2]],
         [[0, 0], [0, 1], [1, 1], [1, 2]]],
        # T
        [[[1, 0], [0, 1], [1, 1], [2, 1]],
         [[1, 0], [1, 1], [2, 1], [1, 2]],
         [[0, 1], [1, 1], [2, 1], [1, 2]],
         [[1, 0], [0, 1], [1, 1], [1, 2]]],
        # Z
        [[[0, 0], [1, 0], [1, 1], [2, 1]],
         [[2, 0], [1, 1], [2, 1], [1, 2]],
         [[0, 1], [1, 1], [1, 2], [2, 2]],
         [[1, 0], [0, 1], [1, 1], [0, 2]]]
    ]

    # Tミノの4隅のセル座標 spinT[i][0]とspinT[i][1]は凸側の隅
    spinT = [
        [[0, 0], [2, 0], [2, 2], [0, 2]],
        [[2, 0], [2, 2], [0, 2], [0, 0]],
        [[2, 2], [0, 2], [0, 0], [2, 0]],
        [[0, 2], [0, 0], [2, 0], [2, 2]]
    ]

    # SRSのoffset SRSoffset[ミノの種類][ミノの向き(上下左右)][試行オフセット][x座標かy座標か]
    SRSoffset = [
        # Iミノのoffset
        [[[0, 0], [-1, 0], [2, 0], [-1, 0], [2, 0]], [[0, 0], [1, 0], [1, 0], [1, 1], [1, -2]],
            [[0, 0], [2, 0], [-1, 0], [2, -1], [-1, -1]], [[0, 0], [0, 0], [0, 0], [0, -2], [0, 1]]],
        # Jミノのoffset
        [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [1, 0], [1, -1], [0, 2], [1, 2]],
            [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [-1, 0], [-1, -1], [0, 2], [-1, 2]]],
        # Lミノのoffset
        [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [1, 0], [1, -1], [0, 2], [1, 2]],
            [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [-1, 0], [-1, -1], [0, 2], [-1, 2]]],
        # Oミノのoffset
        [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
            [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]],
        # Sミノのoffset
        [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [1, 0], [1, -1], [0, 2], [1, 2]],
            [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [-1, 0], [-1, -1], [0, 2], [-1, 2]]],
        # Tミノのoffset
        [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [1, 0], [1, -1], [0, 2], [1, 2]],
            [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [-1, 0], [-1, -1], [0, 2], [-1, 2]]],
        # Iミノのoffset
        [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [1, 0], [1, -1], [0, 2], [1, 2]],
            [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [-1, 0], [-1, -1], [0, 2], [-1, 2]]]
    ]

    # Iミノ以外の右回転時のオフセットデータ
    SRSRotate1A = [
        [[0, 0], [-1, 0], [-1, +1], [0, -2], [-1, -2]],  # 0->R
        [[0, 0], [+1, 0], [+1, -1], [0, +2], [+1, +2]],  # R->2
        [[0, 0], [+1, 0], [+1, +1], [0, -2], [+1, -2]],  # 2->L
        [[0, 0], [-1, 0], [-1, -1], [0, +2], [-1, +2]]  # L->0
    ]

    # Iミノ以外の左回転時のオフセットデータ
    SRSRotate1B = [
        [[0, 0], [+1, 0], [+1, +1], [0, -2], [+1, -2]],  # 0->L
        [[0, 0], [-1, 0], [-1, -1], [0, +2], [-1, +2]],  # L->2
        [[0, 0], [-1, 0], [-1, +1], [0, -2], [-1, -2]],  # 2->R
        [[0, 0], [+1, 0], [+1, -1], [0, +2], [+1, +2]]  # R->0
    ]

    # Iミノの右回転時のオフセットデータ
    SRSRotate2A = [
        [[0, 0], [-2, 0], [+1, 0], [-2, -1], [+1, +2]],  # 0->R
        [[0, 0], [-1, 0], [+2, 0], [-1, +2], [+2, -1]],  # R->2
        [[0, 0], [+2, 0], [-1, 0], [+2, +1], [-1, -2]],  # 2->L
        [[0, 0], [-2, 0], [+1, 0], [+1, -2], [-2, +1]]  # L->0
    ]

    # Iミノの左回転時のオフセットデータ
    SRSRotate2B = [
        [[0, 0], [-1, 0], [+2, 0], [-1, +2], [+2, -1]],  # 0->L
        [[0, 0], [+1, 0], [-2, 0], [-2, -1], [+1, +2]],  # L->2
        [[0, 0], [+1, 0], [-2, 0], [+1, -2], [-2, +1]],  # 2->R
        [[0, 0], [+2, 0], [-1, 0], [+2, +1], [-1, -2]]  # R->0
    ]

    # SRSテーブルの参照用データです。[回転方向][結果の角度]=使用するSRSテーブル
    SrsRotatePattern = [
        [3, 0, 1, 2],
        [3, 2, 1, 0]
    ]

    def setreset(self):
        self.gameStartFlag = False
        self.gameOverFlag = False
        self.score = 0
        self.minoX = 3
        self.minoY = 0
        self.rotate = 0
        self.l = [0, 1, 2, 3, 4, 5, 6]
        self.nextList = []
        self.holdMino = 100
        self.changeCount = 0
        self.minoType = None
        self.field = []
        self.newField = []
        self.offsetnum=0
        self.lastcommand=False
        for i in range(20):
            line = []
            for j in range(10):
                line.append(0)
            self.field.append(copy.deepcopy(line))
        # fieldのすべての中身を0にする
        for i in range(self.FIELD_HEIGHT):
            for j in range(self.FIELD_WIDTH):
                self.field[i][j] = 0
